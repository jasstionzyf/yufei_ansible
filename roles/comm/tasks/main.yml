---
#- name: test task 1
#  shell: echo {{ as_test  }}
#  #hostvars['gpu0.dev']['vars']['as_log_dirs']
#  tags: comm_test_task1
#  register: comm_test_task1_out
#
#- debug: var=comm_test_task1_out.stdout_lines
#  tags: comm_test_task1
#- name: test task 2
#  command: bash -l -c ifconfig
#  tags: comm_test_task2
#  register: comm_test_task2_out
#- debug: var=comm_test_task2_out.stdout_lines
#  tags: comm_test_task2

#- name: set privilidge for imageAI project at remote machine
#  file:
#    path: /data/scripts/
#    owner: zhaoyufei
#    group: hadoop
#    mode: u=rwx,g=rx,o=rx
#    recurse: yes
#    state: directory
#  tags: imageAI_deploy
#  become: yes
#  become_user: root


#- name: Include vars of users.yml to users
#  include_vars:
#    file: vars/users.yml
#    name: users

- name: Make sure we have a 'wheel' group
  group:
    name: wheel
    state: present
  become: yes
  become_user: root


- name: Allow 'wheel' group to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%wheel'
    line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
  become: yes
  become_user: root
- name: add groups
  group:
    name: "{{item.groups}}"
    state: present
  with_items: "{{users}}"
  tags: user_create
  become: yes
  become_user: root

- name: Add users | create users, shell, home dirs
  user:
      name: "{{item.username}}"
      shell: /bin/bash
      create_home: yes
      comment: create with ansible
      groups: "{{ item.groups }}"
  with_items: "{{users}}"
  tags: user_create
  become: yes
  become_user: root


#- name: Add users | create users, shell, home dirs
#
#  tags: user_create
#  become: yes
#  become_user: root





- name: deploy imageAI project to server
  synchronize:
    src: /Volumes/v2/data/projects/my_work/imageAI
    dest: /data/projects/tf2/
    rsync_opts:
      - "--no-motd"
      - "--exclude=.git"
  tags: imageAI2_deploy
- name: deploy imageAI project to server
#  pip:
#    name: some_package_name
#    executable: "/data/miniconda3/envs/imageAI2/bin/pip"
  command:
    cmd: /data/miniconda3/envs/imageAI2/bin/pip install ./imageAI/.
    chdir: /data/projects/tf2/

  tags: imageAI2_deploy

- name: deploy imageAI project to server
  synchronize:
    src: /Volumes/v2/data/projects/my_work/imageAI
    dest: /data/projects/
    rsync_opts:
      - "--no-motd"
      - "--exclude=.git"
  tags: imageAI_deploy
- name: deploy imageCaption project to server
  synchronize:
    src: /Volumes/v2/data/projects/my_work/imageCaption
    dest: /data/projects/
    rsync_opts:
      - "--no-motd"
      - "--exclude=.git"
  tags: imageCaption_deploy


- name: upload file to remote machine
  synchronize:
    src: /Volumes/v2/vcgImageAI/vcgImageAI.zip
    dest: /home/zhaoyufei/vcgImageAI.zip
  tags: local_to_hdfs

- name: upload remote file to hdfs
  command: bash -l -c 'hadoop fs -put -f /home/zhaoyufei/vcgImageAI.zip /data/stuff/'
  register: hdfs_out

  tags: local_to_hdfs

- debug: var=hdfs_out.stdout_lines
  tags: local_to_hdfs






- name: host file update - Local DNS setup across all the servers also need to remove old domain
  tags: update_hosts
  become: yes
  become_user: root
  lineinfile:
    path: /etc/hosts
    line: "{{item.ip}} \t {{item.domain}}"
    create: yes
  with_items: "{{vbs_domains}}"
  #lookup('vars',as_hostname+'_domains' )




#- name: set server env, like:
- name: create ssh folder
  tags: ssh_setup
  become: yes
  become_user: root
  file:
    path: /home/{{item.username}}/.ssh
    owner: "{{item.username}}"
    group: "{{item.groups}}"
    mode: u=rwx,g=,o=
    recurse: no
    state: directory
  with_items: "{{users}}"
- name: update ssh config file
  become: yes
  become_user: root
  tags: ssh_setup
  template:
    dest: /etc/ssh/sshd_config
    src: templates/sshd_config
    mode: u=rw,g=r,o=r
    owner: root
    group: root

- name: restart_ssh
  become: yes
  become_user: root
  tags: ssh_setup
  service:
    name: sshd
    state: restarted
- name: copy private key
  tags: ssh_setup
  become: yes
  become_user: root
  copy:
    src: "{{comm_libarys_path}}ssh/id_rsa"
    dest: /home/{{item.username}}/.ssh/id_rsa
    owner: "{{item.username}}"
    group: "{{item.groups}}"
    mode: u=rw,g=,o=
  with_items: "{{users}}"

- name: set up pub key
  become: yes
  become_user: root
  tags: ssh_setup
  authorized_key:
    user: "{{item.username}}"
    key: "{{ lookup('file', '{{comm_libarys_path}}ssh/id_rsa.pub') }}"
    state: present
  with_items: "{{users}}"








- name: Allow 'sudo' group to have passwordless sudo
  tags: passwordless_sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
  become: yes
  become_user: root


- name: Remove the java_home
  become: yes
  become_user: root
  tags: jdk_present
  file:
    state: absent
    path: "{{java_home}}"
- name: set up jdk
  become: yes
  become_user: root
  tags: jdk_present
  file:
    path: "{{java_home}}"
    state: directory
    owner: root
    group: root
    recurse: yes

- name: set up jdk
  become: yes
  become_user: root
  tags: jdk_present
  unarchive:
    src: "{{comm_libarys_path}}java/jdk-8u71-linux-x64.tar.gz"
    dest: "{{java_home_prefix}}"
    owner: root
    group: root

- name: set up jdk
  become: yes
  become_user: root
  tags: jdk_present
  file:
    path: "{{java_home}}bin"
    mode: u=rwx,g=rx,o=rx
    recurse: yes



#    creates: java_home




- name: set up jdk
  become: yes
  become_user: root
  tags: jdk_present
  template:
    dest: /etc/profile.d/jdk.sh
    src: templates/jdk.sh.j2
    mode: u=rw,g=r,o=r
    owner: root
    group: root








- name: Download Miniconda
  tags: conda_install
  get_url:
    url: https://repo.continuum.io/miniconda/Miniconda3-{{miniconda_version}}-Linux-x86_64.sh
    dest: /tmp/install-miniconda.sh
    mode: 0550
- name: Create conda folder
  become: yes
  become_user: root
  tags: conda_install
  file:
    path: /opt/miniconda3
    state: directory
    owner: root
    group: root
    recurse: yes
- name: Run the installer
  become: yes
  become_user: root
  tags: conda_install
  shell: /tmp/install-miniconda.sh -b -u -p /opt/miniconda3
- name: Remove the installer
  tags: conda_install
  file:
    state: absent
    path: /tmp/install-miniconda.sh
- name: Add miniconda bin to path
  become: yes
  become_user: root
  tags: conda_install
  shell: echo 'export PATH=/opt/miniconda3/bin:$PATH' >> /etc/profile

- name: conda - execution permission for all
  become: yes
  become_user: root
  tags: conda_install
  file:
    path: /opt/miniconda3/bin
    mode: u=rwx,g=rx,o=rx
    recurse: yes


